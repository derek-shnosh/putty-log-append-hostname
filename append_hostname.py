#!/usr/bin/python3

"""
PuTTY cannot automatically parse the hostname from an SSH session to be used
within the log file name variables, preventing the use of the device's hostname
in the log file for any sessions established via IP.

This is to be used with PuTTY .log files generated by "Gather Scripts"
containing the output of `show running-configuration`.

This script will parse all log files in the specified directory for a line that
starts with "hostname" to capture the hostname and append it to the front of
the filename.

Usage: python3 ./append_hostname.py ./logfiles/
"""

import sys
import os
import re
import click
from sys import platform

path = sys.argv[1]
regex = "^hostname (.*)"

# Terminate if provided path does not exist.
if not os.path.exists(path):
    print(f"Path does not exist: '{path}'")
    exit(1)

# Add trailing slash to path if it wasn't included from the input.
# Will not add trailing slash if already exists.
path = os.path.join(path, "")

# If linux, prompt to change all .log files to read-only.
if platform == "linux" or platform == "linux2":
    make_read_only = click.confirm("Change permissions on renamed .log files to read-only?", default=False)

print(f"Checking .log files in path: {path}")

for file in os.listdir(path):
    if ".log" in file:
        with open(path+file, "r") as f:
            file_content = f.read()
            match = re.search(regex, file_content, re.MULTILINE)
            if match:
                hostname = (match.group(1))
                hostname_in_filename = re.search(hostname, file)
                if hostname_in_filename:
                    print(f"> Hostname already exists at the start of file: {file}")
                else:
                    print(f"> Renaming: {file} -> {hostname}_{file}")
                    os.rename(f"{path}{file}", f"{path}{hostname}_{file}")
                    if make_read_only:
                        if os.access(f"{path}{hostname}_{file}", os.W_OK):
                            print(f"  ... Changing permissions to read-only.")
                            os.chmod(f"{path}{hostname}_{file}", 0o444)
                        else:
                            print(f"  ... File is already read-only.")
            else:
                print(f"> No lines start with 'hostname' in: {file}")
    else:
        print(f"> Ignoring (not a .log file): {file}")
